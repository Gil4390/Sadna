// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SadnaExpress.DataLayer;

namespace SadnaExpress.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230518120839_Intial")]
    partial class Intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("SadnaExpress.DomainLayer.Notification", b =>
                {
                    b.Property<Guid>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MemberUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MemberUserId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SentFrom")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SentTo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationID");

                    b.HasIndex("MemberUserId");

                    b.HasIndex("MemberUserId1");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.Inventory", b =>
                {
                    b.Property<Guid>("StoreID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Items_quantityDB")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.Item", b =>
                {
                    b.Property<Guid>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.ItemForOrder", b =>
                {
                    b.Property<Guid>("ItemForOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrderID")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemForOrderId");

                    b.HasIndex("OrderID");

                    b.ToTable("ItemForOrders");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderID");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.Review", b =>
                {
                    b.Property<Guid>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ItemID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewText")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StoreID")
                        .HasColumnType("TEXT");

                    b.HasKey("ReviewID");

                    b.HasIndex("ItemID");

                    b.HasIndex("StoreID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.ShoppingBasket", b =>
                {
                    b.Property<Guid>("ShoppingBasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemInBasketDB")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("TEXT");

                    b.HasKey("ShoppingBasketId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("shoppingBaskets");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("ShoppingCartId");

                    b.ToTable("shoppingCarts");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.Store", b =>
                {
                    b.Property<Guid>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscountPolicyCounter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchasePolicyCounter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreRating")
                        .HasColumnType("INTEGER");

                    b.HasKey("StoreID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.User.Macs", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("mac")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("macs");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.User.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.User.Member", b =>
                {
                    b.HasBaseType("SadnaExpress.DomainLayer.User.User");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LoggedIn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityQuestionsDB")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Member");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.User.PromotedMember", b =>
                {
                    b.HasBaseType("SadnaExpress.DomainLayer.User.Member");

                    b.Property<string>("Appoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectSupervisor")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermissionDB")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("PromotedMember");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Notification", b =>
                {
                    b.HasOne("SadnaExpress.DomainLayer.User.Member", null)
                        .WithMany("AwaitingNotification")
                        .HasForeignKey("MemberUserId");

                    b.HasOne("SadnaExpress.DomainLayer.User.Member", null)
                        .WithMany("awaitingNotification")
                        .HasForeignKey("MemberUserId1");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.Inventory", b =>
                {
                    b.HasOne("SadnaExpress.DomainLayer.Store.Store", null)
                        .WithOne("itemsInventory")
                        .HasForeignKey("SadnaExpress.DomainLayer.Store.Inventory", "StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.ItemForOrder", b =>
                {
                    b.HasOne("SadnaExpress.DomainLayer.Store.Order", null)
                        .WithMany("ListItems")
                        .HasForeignKey("OrderID");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.Review", b =>
                {
                    b.HasOne("SadnaExpress.DomainLayer.Store.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");

                    b.HasOne("SadnaExpress.DomainLayer.Store.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.Store.ShoppingBasket", b =>
                {
                    b.HasOne("SadnaExpress.DomainLayer.Store.ShoppingCart", null)
                        .WithMany("Baskets")
                        .HasForeignKey("ShoppingCartId");
                });

            modelBuilder.Entity("SadnaExpress.DomainLayer.User.User", b =>
                {
                    b.HasOne("SadnaExpress.DomainLayer.Store.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId");
                });
#pragma warning restore 612, 618
        }
    }
}
